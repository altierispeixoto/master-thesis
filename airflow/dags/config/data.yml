base_url: "http://dadosabertos.c3sl.ufpr.br/curitibaurbs/"

etl_tasks:
  tabela_linhas:
    folder: linhas
    file: linhas.json.xz

  pontos_linha:
    folder: pontoslinha
    file: pontosLinha.json.xz

  tabela_linha:
    folder: tabelalinha
    file: tabelaLinha.json.xz

  tabela_trechositinerarios:
    folder: trechositinerarios
    file: trechosItinerarios.json.xz

  tabela_tabelaveiculo:
    folder: tabelaveiculo
    file: tabelaVeiculo.json.xz

  tabela_veiculos:
    folder: veiculos
    file: veiculos.json.xz

etl_queries:
#  lines:
#      "
#          select distinct cod,
#                        categoria_servico,
#                        nome,
#                        nome_cor,
#                        somente_cartao,
#                        year,
#                        month,
#                        day
#                    from (
#                        select l.cod,
#                            l.categoria_servico,
#                            l.nome,
#                            l.nome_cor,
#                            l.somente_cartao,
#                            v.year as year,
#                            v.month as month,
#                            v.day as day
#                        from veiculos v
#                          right join linhas l on (v.cod_linha = l.cod and l.year = v.year and l.month = v.month  and l.day = v.day)
#                           where  l.year = year('{datareferencia}')
#                             and l.month = month('{datareferencia}')
#                             and l.day = dayofmonth('{datareferencia}')
#                          ) t
#          order by cod, year, month, day
#  "

#  busstops:
#      "   with linhas as (
#                          select  distinct cod,
#                                  categoria_servico,
#                                  nome,
#                                  nome_cor,
#                                  somente_cartao,
#                                  year,
#                                  month,
#                                  day
#                          from (
#                              select l.cod,
#                                  l.categoria_servico,
#                                  l.nome,
#                                  l.nome_cor,
#                                  l.somente_cartao,
#                                  v.year as year,
#                                  v.month as month,
#                                  v.day as day
#                              from veiculos v
#                              right join linhas l on (v.cod_linha = l.cod and l.year = v.year and l.month = v.month  and l.day = v.day)
#                                   where  l.year = year('{datareferencia}')
#                             and l.month = month('{datareferencia}')
#                             and l.day = dayofmonth('{datareferencia}')
#                            ) as l
#                          )
#                          select distinct
#                              pl.cod as cod_linha
#                             ,pl.nome
#                             ,pl.num
#                             ,pl.tipo
#                             ,pl.lat
#                             ,pl.lon
#                             ,pl.sentido as sentido_linha
#                             ,l.year
#                             ,l.month
#                             ,l.day
#                          from     pontoslinha	pl
#                          inner join linhas l on (pl.cod = l.cod and l.year = pl.year and l.month = pl.month  and l.day = pl.day )
#     "

  routes: "
          with vlinhas as (
          	select  distinct cod,
          	              year,
                          month,
                          day
          	       from (
                      select l.cod,
                             v.year as year,
                             v.month as month,
                             v.day as day
                      from veiculos v
                      right join linhas l on (v.cod_linha = l.cod and l.year = v.year and l.month = v.month  and l.day = v.day)
                      where  l.year = year('{datareferencia}')
                             and l.month = month('{datareferencia}')
                             and l.day = dayofmonth('{datareferencia}')
          		) as l
          	),
          	rota_sequenciada as  (
          		select 	  pseq.cod_linha
          		         ,pseq.sentido_linha
          		         ,pseq.seq_inicio
          		         ,pseq.seq_fim
          		         ,pseq.ponto_inicio
          		         ,pseq.nome_ponto_inicio
          		         ,pseq.ponto_final
          		         ,pseq.nome_ponto_final
          		         ,li.CATEGORIA_SERVICO as categoria_servico
          		         ,li.NOME as nome_linha
          		         ,li.NOME_COR as nome_cor
          		         ,li.SOMENTE_CARTAO as somente_cartao
          		         ,pseq.datareferencia
          		         from (
          		          		select
          		                	  p1.COD as cod_linha
          		                     ,p1.SENTIDO  as sentido_linha
          		                     ,p1.SEQ      as seq_inicio
          		                     ,p2.SEQ      as seq_fim
          		                     ,p1.NUM      as ponto_inicio
          		                     ,p1.NOME     as nome_ponto_inicio
          		                     ,p2.NUM      as ponto_final
          		                     ,p2.NOME     as nome_ponto_final
          		                     ,p1.datareferencia
          		                     	from pontoslinha p1
          		                     	inner join pontoslinha p2 on (cast(p1.SEQ as int) + 1 = cast(p2.SEQ as int) and p1.COD = p2.COD and p1.SENTIDO = p2.SENTIDO
          		                     	                               and p1.year = p2.year and p1.month = p2.month and p1.day = p2.day
          		                     	                               )
          		                     	where  p1.year  = year('{datareferencia}')
                            			   and p1.month = month('{datareferencia}')
                                           and p1.day   = dayofmonth('{datareferencia}')
          		               ) pseq
          							inner join linhas li  on (pseq.cod_linha = li.COD and pseq.datareferencia = li.datareferencia)
          							 order by pseq.cod_linha
          							,pseq.sentido_linha
          							,pseq.seq_inicio
          							,pseq.seq_fim
          )
                   select distinct
                       cod_linha
                      ,sentido_linha
                      ,cast(seq_inicio as int) as seq_inicio
                      ,cast(seq_fim as int) as seq_fim
                      ,ponto_inicio
                      ,nome_ponto_inicio
                      ,ponto_final
                      ,nome_ponto_final
                      ,categoria_servico
                      ,nome_linha
                      ,nome_cor
                      ,somente_cartao
                      ,l.year
                      ,l.month
                      ,l.day
                  from  rota_sequenciada rt
                      left join vlinhas l on (rt.cod_linha = l.cod)
                  order by  seq_inicio,seq_fim
    "

  trip-endpoints: "
  								with vlinhas as (
                                                   select  distinct cod,
                                                               year,
                                                               month,
                                                               day,
                                                               datareferencia
                                                   from (
                                                       select l.cod,
                   	                                    v.year as year,
                   	                                    v.month as month,
                   	                                    v.day as day,
                   	                                    l.datareferencia
                                                       from veiculos v
                                                           right join linhas l on (v.cod_linha = l.cod and l.year = v.year and l.month = v.month  and l.day = v.day)
                                                       where  l.year = year('{datareferencia}')
                             							  and l.month= month('{datareferencia}')
                             							  and l.day = dayofmonth('{datareferencia}')
                                                   ) as l
                                             ),
                                           start_end as (
                                                   select  bs.cod
                                                           ,bs.sentido
                                                           ,min(cast(bs.seq as int)) as start_trip
                                                           ,max(cast(bs.seq as int)) as end_trip
                                                           ,l.year
                                                           ,l.month
                                                           ,l.day
                                                   from pontoslinha bs
                                                      left join vlinhas l  on (bs.cod = l.cod and bs.datareferencia = l.datareferencia)
                                                   group by bs.cod,bs.sentido,l.year,l.month,l.day
                                           )
                                           select ps.cod     as line_code
                                                 ,ps.sentido
                                                 ,ps.num     as origin
                                                 ,ps.nome    as ponto_origem
                                                 ,pe.num     as destination
                                                 ,pe.nome    as ponto_destino
                                                 ,ss.year
                                                 ,ss.month
                                                 ,ss.day
                                           from start_end  ss
                                           inner join pontoslinha ps on (ps.cod = ss.cod  and ps.sentido = ss.sentido and cast(ps.seq as int) = ss.start_trip and ss.year = ps.year and ss.month = ps.month and ss.day = ps.day)
                                           inner join pontoslinha pe on (pe.cod = ss.cod  and pe.sentido = ss.sentido and cast(pe.seq as  int) = ss.end_trip and pe.year = ps.year and pe.month = ps.month and pe.day = ps.day)
                                           where pe.year = year('{datareferencia}')
                             				 and pe.month = month('{datareferencia}')
                             			     and pe.day = dayofmonth('{datareferencia}')
      "

##########################################################
  # schedules: "( 
  #              with linhas as (
  #                         select  distinct cod,
  #                                     year,
  #                                     month,
  #                                     day
  #                               from (
  #                                 select l.cod,
  #                                        v.year as year,
  #                                        v.month as month,
  #                                        v.day as day
  #                                 from veiculos v
  #                                 right join linhas l on (v.cod_linha = l.cod and l.year = v.year and l.month = v.month  and l.day = v.day)
  #                                 where l.year = cast(extract( YEAR from date '{datareferencia}') as varchar)
  #                           	    and l.month= cast(extract( MONTH from date '{datareferencia}') as varchar)
  #                                   and l.day = cast(extract( DAY from date '{datareferencia}')  as varchar)
  #                         ) as l
  #                     )
  #                     select t.cod_linha
  #                           ,t.cod_ponto
  #                           ,t.horario
  #                           ,t.nome_linha
  #                           ,t.tabela
  #                           ,t.veiculo
  #                           ,l.year
  #                           ,l.month
  #                           ,l.day
  #                     from tabelaveiculo t
  #                         left join linhas l on (t.cod_linha = l.cod)
  #                     where t.year = cast(extract( YEAR from date '{datareferencia}') as varchar)
  #                       and t.month= cast(extract( MONTH from date '{datareferencia}') as varchar)
  #                       and t.day = cast(extract( DAY from date '{datareferencia}')  as varchar)
  #                     order by cod_linha,horario
  #         ) q1"

  trips: "
          with vlinhas as (
                    select  distinct cod,
                            year,
                            month,
                            day,
                            datareferencia
                        from (
                          select l.cod,
                                      v.year as year,
                                      v.month as month,
                                      v.day as day,
                                      l.datareferencia
                          from veiculos v
                            right join linhas l on (v.cod_linha = l.cod and l.year = v.year and l.month = v.month  and l.day = v.day)
                          where  l.year = year('{datareferencia}')
                                  and l.month= month('{datareferencia}')
                                  and l.day = dayofmonth('{datareferencia}')
                                        ) as l
                                  ),
                start_end as (
                    select  bs.cod
                        ,bs.sentido
                        ,min(cast(bs.seq as int)) as start_trip
                        ,max(cast(bs.seq as int)) as end_trip
                        ,l.year
                        ,l.month
                        ,l.day
                    from pontoslinha bs
                    left join vlinhas l  on (bs.cod = l.cod and bs.datareferencia = l.datareferencia)
                        group by bs.cod,bs.sentido,l.year,l.month,l.day
                ),
                trip_endpoints as (
                      select ps.cod     as line_code
                              ,ps.sentido
                              ,ps.num     as start_point
                              ,ps.nome    as ponto_origem
                              ,pe.num     as end_point
                              ,pe.nome    as ponto_destino
                              ,ss.year
                              ,ss.month
                              ,ss.day
                        from start_end  ss
                        inner join pontoslinha ps on (ps.cod = ss.cod  and ps.sentido = ss.sentido and cast(ps.seq as int) = ss.start_trip and ss.year = ps.year and ss.month = ps.month and ss.day = ps.day)
                        inner join pontoslinha pe on (pe.cod = ss.cod  and pe.sentido = ss.sentido and cast(pe.seq as  int) = ss.end_trip and pe.year = ps.year and pe.month = ps.month and pe.day = ps.day)
                        where pe.year = year('{datareferencia}')
                          and pe.month= month('{datareferencia}')
                            and pe.day = dayofmonth('{datareferencia}')
                ),
                trips as (
                        select cod_linha     as line_code
                              ,cod_ponto     as start_point
                              ,horario       as start_time
                              ,tabela        as time_table
                              ,veiculo       as vehicle
                              ,lead(horario) over(partition by cod_linha,tabela,veiculo order by cod_linha, horario)   as end_time
                              ,lead(cod_ponto) over(partition by cod_linha,tabela,veiculo order by cod_linha, horario) as end_point
                        from tabelaveiculo tv
                        where  tv.year = year('{datareferencia}')
                              and tv.month= month('{datareferencia}')
                              and tv.day = dayofmonth('{datareferencia}')
                        order by cod_linha,horario
                )
                select t.line_code
                      ,t.start_point
                      ,t.start_time
                      ,t.time_table
                      ,t.vehicle
                      ,t.end_time
                      ,t.end_point
                      ,te.sentido
                      ,te.year
                      ,te.month
                      ,te.day
                from trips t left join trip_endpoints te  on (t.line_code = te.line_code and t.start_point = te.start_point and t.end_point = te.end_point)
                where te.sentido is not null
    "

  stopevents: "
    select  v.cod_linha,
            v.veic as vehicle,
            v.event_timestamp as stop_timestamp,
            v.year,
            v.month,
            v.day,
            v.hour,
            v.lat as latitude,
            v.lon as longitude,
            date_format(v.event_timestamp, 'HH:mm:ss') as event_time
      from veiculos v
      where v.moving_status = 'STOPPED'
        and v.year  = year('{datareferencia}')
        and v.month = month('{datareferencia}')
        and v.day   = dayofmonth('{datareferencia}')
        order by vehicle, event_timestamp
    "

neo4j_import:
  lines:
    cypher_query: >
      LOAD CSV WITH HEADERS FROM 'file:///lines/{datareferencia}/lines.csv' AS row
      MERGE (l:Line {line_code: row.cod , name: row.nome, category: row.categoria_servico, color: row.nome_cor, card_only: row.somente_cartao  })


  lines_timetree:
    cypher_query: >
      LOAD CSV WITH HEADERS FROM 'file:///lines/{datareferencia}/lines.csv' AS row
      with row where NOT toInteger(row.year) IS NULL
      match (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)}), (l:Line {line_code:row.cod,name:row.nome})
      merge (d)-[r2:EXISTS_LINE]->(l)

  vehicles:
    cypher_query: >
      USING PERIODIC COMMIT 10000
      LOAD CSV WITH HEADERS FROM 'file:///stopevents/{datareferencia}/stopevents.csv' AS row
      with distinct row.vehicle as vehicle where NOT vehicle = ""
      merge (v:Vehicle {vehicle:vehicle})

  vehicles2:
    cypher_query: >
      USING PERIODIC COMMIT 10000
      LOAD CSV WITH HEADERS FROM "file:///trips/{datareferencia}/trips.csv" AS row
      with distinct row.vehicle as vehicle where NOT vehicle = ""
      merge (v:Vehicle {vehicle:vehicle})

  busstops:
    cypher_query: >
      USING PERIODIC COMMIT 10000
      LOAD CSV WITH HEADERS FROM 'file:///busstops/{datareferencia}/busstops.csv' AS row
      MERGE (bs:BusStop {number: row.num, name: row.nome, type: row.tipo, geometry: 'POINT(' + row.lon +' '+ row.lat +')', latitude: row.lat, longitude: row.lon })

  trip_endpoints:
    cypher_query: >
      USING PERIODIC COMMIT 10000
      LOAD CSV WITH HEADERS FROM "file:///trip-endpoints/{datareferencia}/trip-endpoints.csv" AS row
      MATCH (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:EXISTS_LINE]->(l:Line {line_code:row.line_code}),(bs0:BusStop {number:row.origin}),(bs1:BusStop {number:row.destination})
      MERGE (l)-[:HAS_TRIP]->(t:Trip {line_way:row.sentido})
      MERGE (t)-[:STARTS_ON_POINT]->(bs0)
      MERGE (t)-[:ENDS_ON_POINT]->(bs1)

  trip_bus_stops:
    cypher_query: >
      LOAD CSV WITH HEADERS FROM "file:///busstops/{datareferencia}/busstops.csv" AS row  
      MATCH (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:EXISTS_LINE]->(l:Line {line_code:row.cod_linha})-[:HAS_TRIP]->(t:Trip {line_way:row.sentido_linha}), (bs:BusStop {number: row.num})
      merge (t)-[:HAS_BUS_STOP]->(bs)
 
  
  routes:
    cypher_query: >
      USING PERIODIC COMMIT 21000
      LOAD CSV WITH HEADERS FROM "file:///routes/{datareferencia}/routes.csv" AS row
      MATCH (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:EXISTS_LINE]->(l:Line {line_code:row.cod_linha})-[:HAS_TRIP]->(t:Trip {line_way:row.sentido_linha})-[:HAS_BUS_STOP]->(bss: BusStop {number: row.ponto_inicio})
      MATCH (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:EXISTS_LINE]->(l:Line {line_code:row.cod_linha})-[:HAS_TRIP]->(t:Trip {line_way:row.sentido_linha})-[:HAS_BUS_STOP]->(bse: BusStop {number: row.ponto_final})
      MERGE (bss) -[r:NEXT_STOP {
                         line_code: row.cod_linha
                        ,line_way: row.sentido_linha
                        ,service_category: row.categoria_servico
                        ,line_name: row.nome_linha
                        ,color_name: row.nome_cor
                        ,card_only: row.somente_cartao
      }]->(bse)
      ON CREATE SET 
        r.distance = distance(point({longitude: toFloat(bss.longitude),latitude: toFloat(bss.latitude) ,crs: 'wgs-84'})
        ,point({longitude: toFloat(bse.longitude),latitude: toFloat(bse.latitude) ,crs: 'wgs-84'}))

  schedules:
    cypher_query: >
      USING PERIODIC COMMIT 10000
      LOAD CSV WITH HEADERS FROM "file:///trips/{datareferencia}/trips.csv" AS row
      with row where NOT toInteger(row.year) IS NULL and not row.vehicle = "" and not row.start_time ="" and not row.end_time = "" and not row.time_table ="" and not row.start_point = "" and not row.sentido = ""
      MERGE (s:Schedule {start_time:row.start_time, end_time:row.end_time, time_table:row.time_table, line_code:row.line_code, start_point:row.start_point, year: toInteger(row.year), month: toInteger(row.month), day: toInteger(row.day), vehicle:row.vehicle, line_way:row.sentido})
  
  trip_schedules:
    cypher_query: >
        USING PERIODIC COMMIT 10000
        LOAD CSV WITH HEADERS FROM "file:///trips/{datareferencia}/trips.csv" AS row
        with row where NOT toInteger(row.year) IS NULL and not row.vehicle = "" and not row.start_time ="" and not row.end_time = "" and not row.time_table =""  and not row.start_point = ""
        match (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[r2:EXISTS_LINE]->(l:Line {line_code:row.line_code} )-[:HAS_TRIP]->(t:Trip {line_way:row.sentido})-[:STARTS_ON_POINT]->(bs:BusStop {number:row.start_point}) ,
        (s:Schedule {start_time:row.start_time, end_time:row.end_time, time_table:row.time_table, line_code:row.line_code, start_point:row.start_point, year:toInteger(row.year), month:toInteger(row.month), day:toInteger(row.day), vehicle:row.vehicle, line_way:row.sentido})
        MERGE (t)-[:HAS_SCHEDULE_AT]->(s)

  vehicle_schedules:
    cypher_query: >
      USING PERIODIC COMMIT 10000
      LOAD CSV WITH HEADERS FROM "file:///trips/{datareferencia}/trips.csv" AS row
      with row where NOT toInteger(row.year) IS NULL and not row.vehicle = "" and not row.start_time ="" and not row.end_time = "" and not row.time_table =""  and not row.start_point = ""
      MATCH (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[r2:EXISTS_LINE]->(l:Line {line_code:row.line_code})-[:HAS_TRIP]->(t:Trip {line_way:row.sentido})-[:STARTS_ON_POINT]->(bs:BusStop {number:row.start_point})
      MATCH (t)-[:HAS_SCHEDULE_AT]->(s:Schedule {start_time:row.start_time, end_time:row.end_time, time_table:row.time_table, line_code:row.line_code, start_point:row.start_point, year:toInteger(row.year), month:toInteger(row.month), day:toInteger(row.day), vehicle:row.vehicle, line_way:row.sentido}), (v:Vehicle {vehicle: row.vehicle})
      MERGE (s)-[:HAS_VEHICLE_SCHEDULED]->(v)

  stops:
    cypher_query: >    
      USING PERIODIC COMMIT 15000
      LOAD CSV WITH HEADERS FROM 'file:///stopevents/{datareferencia}/stopevents.csv' AS row
      MERGE (s:Stop {vehicle:row.vehicle, geometry : 'POINT(' + row.longitude +' '+ row.latitude +')', latitude:row.latitude, longitude:row.longitude, event_timestamp:row.stop_timestamp, event_time:row.event_time,line_code: row.cod_linha})

  stops_timetree:
    cypher_query: >
      USING PERIODIC COMMIT 20000
      LOAD CSV WITH HEADERS FROM 'file:///stopevents/{datareferencia}/stopevents.csv' AS row
      match (y:Year {value:toInteger(row.year)})-[:CONTAINS]->(m:Month {value: toInteger(row.month)})-[:CONTAINS]->(d:Day {value: toInteger(row.day)})-[:CONTAINS]->(h:Hour {value: toInteger(row.hour)}), (s:Stop {latitude:row.latitude, longitude:row.longitude,event_timestamp:row.stop_timestamp, event_time:row.event_time,line_code: row.cod_linha})
      merge (h)-[:EXISTS_STOP]->(s)

  event-stop-edges: #event-stop-edges.csv
    cypher_query: >
      USING PERIODIC COMMIT 20000
      LOAD CSV WITH HEADERS FROM "file:///event-stop-edges/{datareferencia}/event-stop-edges.csv" AS row
      MATCH (s:Stop {line_code:row.line_code,latitude:row.latitude,longitude:row.longitude,event_time:row.event_time}),(bs:BusStop {number:row.bus_stop_number})
      create (s)-[e:EVENT_STOP {line_way:row.line_way}]->(bs)

  trackingdata: #trackingdata.csv
    cypher_query: >
      USING PERIODIC COMMIT 20000
      LOAD CSV WITH HEADERS FROM 'file:///trackingdata/{datareferencia}/trackingdata.csv' AS row
      with row where toFloat(row.delta_time) <= 1200
      MATCH (s0:Stop {line_code: row.cod_linha, vehicle:row.veic, event_timestamp:row.last_stop}), (s1:Stop {line_code: row.cod_linha, vehicle:row.veic, event_timestamp:row.current_stop})
      create (s0)-[m:MOVED_TO {delta_time: row.delta_time, delta_distance: row.delta_distance, delta_velocity:row.delta_velocity}]->(s1)

  